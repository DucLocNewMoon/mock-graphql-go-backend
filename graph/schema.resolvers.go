package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"crypto/rand"
	"encoding/json"
	"fmt"
	"gql-go/graph/model"
	"io/ioutil"
	"math/big"
	"path/filepath"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := &model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", randNumber),
		UserID: input.UserID,
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Email is the resolver for the email field.
func (r *queryResolver) Email(ctx context.Context, id string) (*model.Email, error) {
	// Read data from data.json file
	data, err := ioutil.ReadFile(filepath.Join("emails.json"))
	if err != nil {
		return nil, err
	}

	// Unmarshal JSON data into slice of Email structs
	var emails []*model.Email
	if err := json.Unmarshal(data, &emails); err != nil {
		return nil, err
	}

	// Find the email with the given ID
	for _, email := range emails {
		if email.ID == id {
			return email, nil
		}
	}

	// If email with the given ID is not found, return an error
	return nil, fmt.Errorf("email with ID %s not found", id)
}

// Emails is the resolver for the emails field.
func (r *queryResolver) Emails(ctx context.Context) ([]*model.Email, error) {
	// Read data from data.json file
	data, err := ioutil.ReadFile(filepath.Join("emails.json"))
	if err != nil {
		return nil, err
	}

	// Unmarshal JSON data into slice of Email structs
	var emails []*model.Email
	if err := json.Unmarshal(data, &emails); err != nil {
		return nil, err
	}

	return emails, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return &model.User{ID: obj.UserID, Name: "user " + obj.UserID}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
